{"version":3,"file":"static/js/309.bd7f1814.chunk.js","mappings":"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","sources":["api/users.js","constants/api.js","api/albums.js","components/Album.jsx","api/photos.js","pages/albums/Albums.jsx","utils/text-modifiers.js"],"sourcesContent":["import axios from 'axios'\nimport { BASE_URL } from '../constants/api'\nimport pickBy from 'lodash.pickby'\n\nexport const getAllUsers = async (queryVariables) => axios.get(`${BASE_URL}/users`, { params: pickBy(queryVariables) })\n\nexport const getOneUser = async (id) => axios.get(`${BASE_URL}/users/${id}`)\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com'\n","import axios from 'axios'\nimport { BASE_URL } from '../constants/api'\n\nexport const getAllAlbumsByUser = async (userId) => axios.get(`${BASE_URL}/albums?userId=${userId}`)\n","import React, { useState, useCallback, useMemo, useEffect } from 'react'\nimport PT from 'prop-types'\nimport { getPhotosByAlbumId } from '../api/photos'\nimport { capitalizeFirstWord } from '../utils/text-modifiers'\n\nconst Album = ({ albumId, title }) => {\n  const [photos, setPhotos] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  const handleFetch = useCallback(async () => {\n    setIsLoading(true)\n    getPhotosByAlbumId(albumId)\n      .then((res) => {\n        setPhotos(res.data)\n      })\n      .finally(() => setIsLoading(false))\n  }, [])\n\n  const renderPhotos = useMemo(() => {\n    return photos?.map((photo, idx) => {\n      if (idx <= 7)\n        return (\n          <img\n            alt={photo.title}\n            height=\"100px\"\n            key={photo.title}\n            src={photo.url}\n            title={photo.title}\n            width=\"100px\"\n          />\n        )\n      else return null\n    })\n  }, [photos])\n\n  useEffect(() => {\n    handleFetch()\n  }, [handleFetch])\n\n  return (\n    <li className=\"card mb-4\">\n      <div className=\"card-body\">\n        <h2 className=\"card-title\">{capitalizeFirstWord(title)}</h2>\n        {isLoading ? (\n          ''\n        ) : (\n          <div className=\"d-flex flex-row align-items-center gap-4\">\n            {renderPhotos} and {photos.length - 8} photos\n          </div>\n        )}\n      </div>\n    </li>\n  )\n}\n\nAlbum.propTypes = {\n  title: PT.string,\n  albumId: PT.number,\n}\n\nexport default Album\n","import axios from 'axios'\nimport { BASE_URL } from '../constants/api'\n\nexport const getPhotosByAlbumId = async (albumId) => axios.get(`${BASE_URL}/photos?albumId=${albumId}`)\n","import React, { useState, useCallback, useEffect, useMemo } from 'react'\nimport { getOneUser } from '../../api/users'\nimport { getAllAlbumsByUser } from '../../api/albums'\nimport { useParams } from 'react-router-dom'\nimport Loader from '../../ui-kit/components/loader/Loader'\nimport Album from '../../components/Album'\n\nconst Albums = () => {\n  const [albums, setAlbums] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [userData, setUserData] = useState({})\n\n  const { id: userId } = useParams()\n\n  const handleFetch = useCallback(async () => {\n    setIsLoading(true)\n    await Promise.all([getAllAlbumsByUser(userId), getOneUser(userId)])\n      .then((res) => {\n        setAlbums(res[0].data)\n        setUserData(res[1].data)\n      })\n      .finally(() => setIsLoading(false))\n  }, [])\n\n  const renderContent = useMemo(() => {\n    return albums?.map((album) => <Album albumId={album.id} key={album.id} title={album.title} />)\n  }, [albums])\n\n  useEffect(() => {\n    handleFetch()\n  }, [handleFetch])\n\n  return (\n    <div className=\"container\">\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <h1 className=\"mb-4\">List of {userData?.name}`s albums</h1>\n          <div className=\"col\">\n            <ul className=\"list-group\">{renderContent}</ul>\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Albums\n","export const capitalizeFirstWord = (str) =>\n  str.charAt(0).toUpperCase() + str.slice(1)\n"],"names":["getAllUsers","async","axios","get","concat","BASE_URL","params","pickBy","queryVariables","getOneUser","id","getAllAlbumsByUser","userId","_ref","albumId","title","photos","setPhotos","useState","isLoading","setIsLoading","handleFetch","useCallback","getPhotosByAlbumId","then","res","data","finally","renderPhotos","useMemo","map","photo","idx","_jsx","alt","height","src","url","width","useEffect","className","children","_jsxs","capitalizeFirstWord","length","Albums","albums","setAlbums","userData","setUserData","useParams","Promise","all","renderContent","album","Album","Loader","_Fragment","name","str","charAt","toUpperCase","slice"],"sourceRoot":""}